// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodel

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// IotDevice is an object representing the database table.
type IotDevice struct {
	ID        int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	DeviceID  string    `boil:"device_id" json:"device_id" toml:"device_id" yaml:"device_id"`
	Name      string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	Type      string    `boil:"type" json:"type" toml:"type" yaml:"type"`
	Location  string    `boil:"location" json:"location" toml:"location" yaml:"location"`
	Floor     int       `boil:"floor" json:"floor" toml:"floor" yaml:"floor"`
	Zone      string    `boil:"zone" json:"zone" toml:"zone" yaml:"zone"`
	IsActive  null.Bool `boil:"is_active" json:"is_active,omitempty" toml:"is_active" yaml:"is_active,omitempty"`
	CreatedAt null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *iotDeviceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L iotDeviceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var IotDeviceColumns = struct {
	ID        string
	DeviceID  string
	Name      string
	Type      string
	Location  string
	Floor     string
	Zone      string
	IsActive  string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	DeviceID:  "device_id",
	Name:      "name",
	Type:      "type",
	Location:  "location",
	Floor:     "floor",
	Zone:      "zone",
	IsActive:  "is_active",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var IotDeviceTableColumns = struct {
	ID        string
	DeviceID  string
	Name      string
	Type      string
	Location  string
	Floor     string
	Zone      string
	IsActive  string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "iot_devices.id",
	DeviceID:  "iot_devices.device_id",
	Name:      "iot_devices.name",
	Type:      "iot_devices.type",
	Location:  "iot_devices.location",
	Floor:     "iot_devices.floor",
	Zone:      "iot_devices.zone",
	IsActive:  "iot_devices.is_active",
	CreatedAt: "iot_devices.created_at",
	UpdatedAt: "iot_devices.updated_at",
}

// Generated where

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var IotDeviceWhere = struct {
	ID        whereHelperint64
	DeviceID  whereHelperstring
	Name      whereHelperstring
	Type      whereHelperstring
	Location  whereHelperstring
	Floor     whereHelperint
	Zone      whereHelperstring
	IsActive  whereHelpernull_Bool
	CreatedAt whereHelpernull_Time
	UpdatedAt whereHelpernull_Time
}{
	ID:        whereHelperint64{field: "\"iot_devices\".\"id\""},
	DeviceID:  whereHelperstring{field: "\"iot_devices\".\"device_id\""},
	Name:      whereHelperstring{field: "\"iot_devices\".\"name\""},
	Type:      whereHelperstring{field: "\"iot_devices\".\"type\""},
	Location:  whereHelperstring{field: "\"iot_devices\".\"location\""},
	Floor:     whereHelperint{field: "\"iot_devices\".\"floor\""},
	Zone:      whereHelperstring{field: "\"iot_devices\".\"zone\""},
	IsActive:  whereHelpernull_Bool{field: "\"iot_devices\".\"is_active\""},
	CreatedAt: whereHelpernull_Time{field: "\"iot_devices\".\"created_at\""},
	UpdatedAt: whereHelpernull_Time{field: "\"iot_devices\".\"updated_at\""},
}

// IotDeviceRels is where relationship names are stored.
var IotDeviceRels = struct {
}{}

// iotDeviceR is where relationships are stored.
type iotDeviceR struct {
}

// NewStruct creates a new relationship struct
func (*iotDeviceR) NewStruct() *iotDeviceR {
	return &iotDeviceR{}
}

// iotDeviceL is where Load methods for each relationship are stored.
type iotDeviceL struct{}

var (
	iotDeviceAllColumns            = []string{"id", "device_id", "name", "type", "location", "floor", "zone", "is_active", "created_at", "updated_at"}
	iotDeviceColumnsWithoutDefault = []string{"device_id", "name", "type", "location", "floor", "zone"}
	iotDeviceColumnsWithDefault    = []string{"id", "is_active", "created_at", "updated_at"}
	iotDevicePrimaryKeyColumns     = []string{"id"}
	iotDeviceGeneratedColumns      = []string{}
)

type (
	// IotDeviceSlice is an alias for a slice of pointers to IotDevice.
	// This should almost always be used instead of []IotDevice.
	IotDeviceSlice []*IotDevice

	iotDeviceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	iotDeviceType                 = reflect.TypeOf(&IotDevice{})
	iotDeviceMapping              = queries.MakeStructMapping(iotDeviceType)
	iotDevicePrimaryKeyMapping, _ = queries.BindMapping(iotDeviceType, iotDeviceMapping, iotDevicePrimaryKeyColumns)
	iotDeviceInsertCacheMut       sync.RWMutex
	iotDeviceInsertCache          = make(map[string]insertCache)
	iotDeviceUpdateCacheMut       sync.RWMutex
	iotDeviceUpdateCache          = make(map[string]updateCache)
	iotDeviceUpsertCacheMut       sync.RWMutex
	iotDeviceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single iotDevice record from the query.
func (q iotDeviceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*IotDevice, error) {
	o := &IotDevice{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodel: failed to execute a one query for iot_devices")
	}

	return o, nil
}

// All returns all IotDevice records from the query.
func (q iotDeviceQuery) All(ctx context.Context, exec boil.ContextExecutor) (IotDeviceSlice, error) {
	var o []*IotDevice

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodel: failed to assign all query results to IotDevice slice")
	}

	return o, nil
}

// Count returns the count of all IotDevice records in the query.
func (q iotDeviceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to count iot_devices rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q iotDeviceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodel: failed to check if iot_devices exists")
	}

	return count > 0, nil
}

// IotDevices retrieves all the records using an executor.
func IotDevices(mods ...qm.QueryMod) iotDeviceQuery {
	mods = append(mods, qm.From("\"iot_devices\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"iot_devices\".*"})
	}

	return iotDeviceQuery{q}
}

// FindIotDevice retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindIotDevice(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*IotDevice, error) {
	iotDeviceObj := &IotDevice{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"iot_devices\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, iotDeviceObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodel: unable to select from iot_devices")
	}

	return iotDeviceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *IotDevice) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodel: no iot_devices provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(iotDeviceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	iotDeviceInsertCacheMut.RLock()
	cache, cached := iotDeviceInsertCache[key]
	iotDeviceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			iotDeviceAllColumns,
			iotDeviceColumnsWithDefault,
			iotDeviceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(iotDeviceType, iotDeviceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(iotDeviceType, iotDeviceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"iot_devices\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"iot_devices\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to insert into iot_devices")
	}

	if !cached {
		iotDeviceInsertCacheMut.Lock()
		iotDeviceInsertCache[key] = cache
		iotDeviceInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the IotDevice.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *IotDevice) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	key := makeCacheKey(columns, nil)
	iotDeviceUpdateCacheMut.RLock()
	cache, cached := iotDeviceUpdateCache[key]
	iotDeviceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			iotDeviceAllColumns,
			iotDevicePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodel: unable to update iot_devices, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"iot_devices\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, iotDevicePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(iotDeviceType, iotDeviceMapping, append(wl, iotDevicePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update iot_devices row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by update for iot_devices")
	}

	if !cached {
		iotDeviceUpdateCacheMut.Lock()
		iotDeviceUpdateCache[key] = cache
		iotDeviceUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q iotDeviceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update all for iot_devices")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to retrieve rows affected for iot_devices")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o IotDeviceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodel: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), iotDevicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"iot_devices\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, iotDevicePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update all in iotDevice slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to retrieve rows affected all in update all iotDevice")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *IotDevice) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("dbmodel: no iot_devices provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	nzDefaults := queries.NonZeroDefaultSet(iotDeviceColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	iotDeviceUpsertCacheMut.RLock()
	cache, cached := iotDeviceUpsertCache[key]
	iotDeviceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			iotDeviceAllColumns,
			iotDeviceColumnsWithDefault,
			iotDeviceColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			iotDeviceAllColumns,
			iotDevicePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dbmodel: unable to upsert iot_devices, could not build update column list")
		}

		ret := strmangle.SetComplement(iotDeviceAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(iotDevicePrimaryKeyColumns) == 0 {
				return errors.New("dbmodel: unable to upsert iot_devices, could not build conflict column list")
			}

			conflict = make([]string, len(iotDevicePrimaryKeyColumns))
			copy(conflict, iotDevicePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"iot_devices\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(iotDeviceType, iotDeviceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(iotDeviceType, iotDeviceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to upsert iot_devices")
	}

	if !cached {
		iotDeviceUpsertCacheMut.Lock()
		iotDeviceUpsertCache[key] = cache
		iotDeviceUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single IotDevice record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *IotDevice) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodel: no IotDevice provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), iotDevicePrimaryKeyMapping)
	sql := "DELETE FROM \"iot_devices\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete from iot_devices")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by delete for iot_devices")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q iotDeviceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodel: no iotDeviceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete all from iot_devices")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by deleteall for iot_devices")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o IotDeviceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), iotDevicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"iot_devices\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, iotDevicePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete all from iotDevice slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by deleteall for iot_devices")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *IotDevice) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindIotDevice(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *IotDeviceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := IotDeviceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), iotDevicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"iot_devices\".* FROM \"iot_devices\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, iotDevicePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to reload all in IotDeviceSlice")
	}

	*o = slice

	return nil
}

// IotDeviceExists checks if the IotDevice row exists.
func IotDeviceExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"iot_devices\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodel: unable to check if iot_devices exists")
	}

	return exists, nil
}

// Exists checks if the IotDevice row exists.
func (o *IotDevice) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return IotDeviceExists(ctx, exec, o.ID)
}
