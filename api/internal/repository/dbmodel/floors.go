// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodel

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// Floor is an object representing the database table.
type Floor struct {
	ID          int          `boil:"id" json:"id" toml:"id" yaml:"id"`
	FloorNumber int          `boil:"floor_number" json:"floor_number" toml:"floor_number" yaml:"floor_number"`
	Description null.String  `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	TotalArea   null.Float64 `boil:"total_area" json:"total_area,omitempty" toml:"total_area" yaml:"total_area,omitempty"`
	CreatedAt   null.Time    `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt   null.Time    `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *floorR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L floorL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FloorColumns = struct {
	ID          string
	FloorNumber string
	Description string
	TotalArea   string
	CreatedAt   string
	UpdatedAt   string
}{
	ID:          "id",
	FloorNumber: "floor_number",
	Description: "description",
	TotalArea:   "total_area",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
}

var FloorTableColumns = struct {
	ID          string
	FloorNumber string
	Description string
	TotalArea   string
	CreatedAt   string
	UpdatedAt   string
}{
	ID:          "floors.id",
	FloorNumber: "floors.floor_number",
	Description: "floors.description",
	TotalArea:   "floors.total_area",
	CreatedAt:   "floors.created_at",
	UpdatedAt:   "floors.updated_at",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) SIMILAR(x null.String) qm.QueryMod {
	return qm.Where(w.field+" SIMILAR TO ?", x)
}
func (w whereHelpernull_String) NSIMILAR(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT SIMILAR TO ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Float64 struct{ field string }

func (w whereHelpernull_Float64) EQ(x null.Float64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Float64) NEQ(x null.Float64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Float64) LT(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Float64) LTE(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Float64) GT(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Float64) GTE(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Float64) IN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Float64) NIN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Float64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Float64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var FloorWhere = struct {
	ID          whereHelperint
	FloorNumber whereHelperint
	Description whereHelpernull_String
	TotalArea   whereHelpernull_Float64
	CreatedAt   whereHelpernull_Time
	UpdatedAt   whereHelpernull_Time
}{
	ID:          whereHelperint{field: "\"floors\".\"id\""},
	FloorNumber: whereHelperint{field: "\"floors\".\"floor_number\""},
	Description: whereHelpernull_String{field: "\"floors\".\"description\""},
	TotalArea:   whereHelpernull_Float64{field: "\"floors\".\"total_area\""},
	CreatedAt:   whereHelpernull_Time{field: "\"floors\".\"created_at\""},
	UpdatedAt:   whereHelpernull_Time{field: "\"floors\".\"updated_at\""},
}

// FloorRels is where relationship names are stored.
var FloorRels = struct {
	IotDevices     string
	SensorReadings string
	Zones          string
}{
	IotDevices:     "IotDevices",
	SensorReadings: "SensorReadings",
	Zones:          "Zones",
}

// floorR is where relationships are stored.
type floorR struct {
	IotDevices     IotDeviceSlice     `boil:"IotDevices" json:"IotDevices" toml:"IotDevices" yaml:"IotDevices"`
	SensorReadings SensorReadingSlice `boil:"SensorReadings" json:"SensorReadings" toml:"SensorReadings" yaml:"SensorReadings"`
	Zones          ZoneSlice          `boil:"Zones" json:"Zones" toml:"Zones" yaml:"Zones"`
}

// NewStruct creates a new relationship struct
func (*floorR) NewStruct() *floorR {
	return &floorR{}
}

func (o *Floor) GetIotDevices() IotDeviceSlice {
	if o == nil {
		return nil
	}

	return o.R.GetIotDevices()
}

func (r *floorR) GetIotDevices() IotDeviceSlice {
	if r == nil {
		return nil
	}

	return r.IotDevices
}

func (o *Floor) GetSensorReadings() SensorReadingSlice {
	if o == nil {
		return nil
	}

	return o.R.GetSensorReadings()
}

func (r *floorR) GetSensorReadings() SensorReadingSlice {
	if r == nil {
		return nil
	}

	return r.SensorReadings
}

func (o *Floor) GetZones() ZoneSlice {
	if o == nil {
		return nil
	}

	return o.R.GetZones()
}

func (r *floorR) GetZones() ZoneSlice {
	if r == nil {
		return nil
	}

	return r.Zones
}

// floorL is where Load methods for each relationship are stored.
type floorL struct{}

var (
	floorAllColumns            = []string{"id", "floor_number", "description", "total_area", "created_at", "updated_at"}
	floorColumnsWithoutDefault = []string{"floor_number"}
	floorColumnsWithDefault    = []string{"id", "description", "total_area", "created_at", "updated_at"}
	floorPrimaryKeyColumns     = []string{"id"}
	floorGeneratedColumns      = []string{}
)

type (
	// FloorSlice is an alias for a slice of pointers to Floor.
	// This should almost always be used instead of []Floor.
	FloorSlice []*Floor

	floorQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	floorType                 = reflect.TypeOf(&Floor{})
	floorMapping              = queries.MakeStructMapping(floorType)
	floorPrimaryKeyMapping, _ = queries.BindMapping(floorType, floorMapping, floorPrimaryKeyColumns)
	floorInsertCacheMut       sync.RWMutex
	floorInsertCache          = make(map[string]insertCache)
	floorUpdateCacheMut       sync.RWMutex
	floorUpdateCache          = make(map[string]updateCache)
	floorUpsertCacheMut       sync.RWMutex
	floorUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single floor record from the query.
func (q floorQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Floor, error) {
	o := &Floor{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodel: failed to execute a one query for floors")
	}

	return o, nil
}

// All returns all Floor records from the query.
func (q floorQuery) All(ctx context.Context, exec boil.ContextExecutor) (FloorSlice, error) {
	var o []*Floor

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodel: failed to assign all query results to Floor slice")
	}

	return o, nil
}

// Count returns the count of all Floor records in the query.
func (q floorQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to count floors rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q floorQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodel: failed to check if floors exists")
	}

	return count > 0, nil
}

// IotDevices retrieves all the iot_device's IotDevices with an executor.
func (o *Floor) IotDevices(mods ...qm.QueryMod) iotDeviceQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"iot_devices\".\"floor_id\"=?", o.ID),
	)

	return IotDevices(queryMods...)
}

// SensorReadings retrieves all the sensor_reading's SensorReadings with an executor.
func (o *Floor) SensorReadings(mods ...qm.QueryMod) sensorReadingQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"sensor_readings\".\"floor_id\"=?", o.ID),
	)

	return SensorReadings(queryMods...)
}

// Zones retrieves all the zone's Zones with an executor.
func (o *Floor) Zones(mods ...qm.QueryMod) zoneQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"zones\".\"floor_id\"=?", o.ID),
	)

	return Zones(queryMods...)
}

// LoadIotDevices allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (floorL) LoadIotDevices(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFloor interface{}, mods queries.Applicator) error {
	var slice []*Floor
	var object *Floor

	if singular {
		var ok bool
		object, ok = maybeFloor.(*Floor)
		if !ok {
			object = new(Floor)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeFloor)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeFloor))
			}
		}
	} else {
		s, ok := maybeFloor.(*[]*Floor)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeFloor)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeFloor))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &floorR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &floorR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`iot_devices`),
		qm.WhereIn(`iot_devices.floor_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load iot_devices")
	}

	var resultSlice []*IotDevice
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice iot_devices")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on iot_devices")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for iot_devices")
	}

	if singular {
		object.R.IotDevices = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &iotDeviceR{}
			}
			foreign.R.Floor = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.FloorID {
				local.R.IotDevices = append(local.R.IotDevices, foreign)
				if foreign.R == nil {
					foreign.R = &iotDeviceR{}
				}
				foreign.R.Floor = local
				break
			}
		}
	}

	return nil
}

// LoadSensorReadings allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (floorL) LoadSensorReadings(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFloor interface{}, mods queries.Applicator) error {
	var slice []*Floor
	var object *Floor

	if singular {
		var ok bool
		object, ok = maybeFloor.(*Floor)
		if !ok {
			object = new(Floor)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeFloor)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeFloor))
			}
		}
	} else {
		s, ok := maybeFloor.(*[]*Floor)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeFloor)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeFloor))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &floorR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &floorR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`sensor_readings`),
		qm.WhereIn(`sensor_readings.floor_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sensor_readings")
	}

	var resultSlice []*SensorReading
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sensor_readings")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sensor_readings")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sensor_readings")
	}

	if singular {
		object.R.SensorReadings = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sensorReadingR{}
			}
			foreign.R.Floor = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.FloorID {
				local.R.SensorReadings = append(local.R.SensorReadings, foreign)
				if foreign.R == nil {
					foreign.R = &sensorReadingR{}
				}
				foreign.R.Floor = local
				break
			}
		}
	}

	return nil
}

// LoadZones allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (floorL) LoadZones(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFloor interface{}, mods queries.Applicator) error {
	var slice []*Floor
	var object *Floor

	if singular {
		var ok bool
		object, ok = maybeFloor.(*Floor)
		if !ok {
			object = new(Floor)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeFloor)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeFloor))
			}
		}
	} else {
		s, ok := maybeFloor.(*[]*Floor)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeFloor)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeFloor))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &floorR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &floorR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`zones`),
		qm.WhereIn(`zones.floor_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load zones")
	}

	var resultSlice []*Zone
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice zones")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on zones")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for zones")
	}

	if singular {
		object.R.Zones = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &zoneR{}
			}
			foreign.R.Floor = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.FloorID) {
				local.R.Zones = append(local.R.Zones, foreign)
				if foreign.R == nil {
					foreign.R = &zoneR{}
				}
				foreign.R.Floor = local
				break
			}
		}
	}

	return nil
}

// AddIotDevices adds the given related objects to the existing relationships
// of the floor, optionally inserting them as new records.
// Appends related to o.R.IotDevices.
// Sets related.R.Floor appropriately.
func (o *Floor) AddIotDevices(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*IotDevice) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.FloorID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"iot_devices\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"floor_id"}),
				strmangle.WhereClause("\"", "\"", 2, iotDevicePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.FloorID = o.ID
		}
	}

	if o.R == nil {
		o.R = &floorR{
			IotDevices: related,
		}
	} else {
		o.R.IotDevices = append(o.R.IotDevices, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &iotDeviceR{
				Floor: o,
			}
		} else {
			rel.R.Floor = o
		}
	}
	return nil
}

// AddSensorReadings adds the given related objects to the existing relationships
// of the floor, optionally inserting them as new records.
// Appends related to o.R.SensorReadings.
// Sets related.R.Floor appropriately.
func (o *Floor) AddSensorReadings(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SensorReading) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.FloorID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"sensor_readings\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"floor_id"}),
				strmangle.WhereClause("\"", "\"", 2, sensorReadingPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID, rel.Timestamp}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.FloorID = o.ID
		}
	}

	if o.R == nil {
		o.R = &floorR{
			SensorReadings: related,
		}
	} else {
		o.R.SensorReadings = append(o.R.SensorReadings, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sensorReadingR{
				Floor: o,
			}
		} else {
			rel.R.Floor = o
		}
	}
	return nil
}

// AddZones adds the given related objects to the existing relationships
// of the floor, optionally inserting them as new records.
// Appends related to o.R.Zones.
// Sets related.R.Floor appropriately.
func (o *Floor) AddZones(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Zone) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.FloorID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"zones\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"floor_id"}),
				strmangle.WhereClause("\"", "\"", 2, zonePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.FloorID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &floorR{
			Zones: related,
		}
	} else {
		o.R.Zones = append(o.R.Zones, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &zoneR{
				Floor: o,
			}
		} else {
			rel.R.Floor = o
		}
	}
	return nil
}

// SetZones removes all previously related items of the
// floor replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Floor's Zones accordingly.
// Replaces o.R.Zones with related.
// Sets related.R.Floor's Zones accordingly.
func (o *Floor) SetZones(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Zone) error {
	query := "update \"zones\" set \"floor_id\" = null where \"floor_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Zones {
			queries.SetScanner(&rel.FloorID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Floor = nil
		}
		o.R.Zones = nil
	}

	return o.AddZones(ctx, exec, insert, related...)
}

// RemoveZones relationships from objects passed in.
// Removes related items from R.Zones (uses pointer comparison, removal does not keep order)
// Sets related.R.Floor.
func (o *Floor) RemoveZones(ctx context.Context, exec boil.ContextExecutor, related ...*Zone) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.FloorID, nil)
		if rel.R != nil {
			rel.R.Floor = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("floor_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Zones {
			if rel != ri {
				continue
			}

			ln := len(o.R.Zones)
			if ln > 1 && i < ln-1 {
				o.R.Zones[i] = o.R.Zones[ln-1]
			}
			o.R.Zones = o.R.Zones[:ln-1]
			break
		}
	}

	return nil
}

// Floors retrieves all the records using an executor.
func Floors(mods ...qm.QueryMod) floorQuery {
	mods = append(mods, qm.From("\"floors\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"floors\".*"})
	}

	return floorQuery{q}
}

// FindFloor retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFloor(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Floor, error) {
	floorObj := &Floor{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"floors\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, floorObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodel: unable to select from floors")
	}

	return floorObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Floor) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodel: no floors provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(floorColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	floorInsertCacheMut.RLock()
	cache, cached := floorInsertCache[key]
	floorInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			floorAllColumns,
			floorColumnsWithDefault,
			floorColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(floorType, floorMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(floorType, floorMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"floors\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"floors\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to insert into floors")
	}

	if !cached {
		floorInsertCacheMut.Lock()
		floorInsertCache[key] = cache
		floorInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Floor.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Floor) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	key := makeCacheKey(columns, nil)
	floorUpdateCacheMut.RLock()
	cache, cached := floorUpdateCache[key]
	floorUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			floorAllColumns,
			floorPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodel: unable to update floors, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"floors\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, floorPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(floorType, floorMapping, append(wl, floorPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update floors row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by update for floors")
	}

	if !cached {
		floorUpdateCacheMut.Lock()
		floorUpdateCache[key] = cache
		floorUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q floorQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update all for floors")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to retrieve rows affected for floors")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FloorSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodel: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), floorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"floors\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, floorPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update all in floor slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to retrieve rows affected all in update all floor")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Floor) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("dbmodel: no floors provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	nzDefaults := queries.NonZeroDefaultSet(floorColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	floorUpsertCacheMut.RLock()
	cache, cached := floorUpsertCache[key]
	floorUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			floorAllColumns,
			floorColumnsWithDefault,
			floorColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			floorAllColumns,
			floorPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dbmodel: unable to upsert floors, could not build update column list")
		}

		ret := strmangle.SetComplement(floorAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(floorPrimaryKeyColumns) == 0 {
				return errors.New("dbmodel: unable to upsert floors, could not build conflict column list")
			}

			conflict = make([]string, len(floorPrimaryKeyColumns))
			copy(conflict, floorPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"floors\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(floorType, floorMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(floorType, floorMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to upsert floors")
	}

	if !cached {
		floorUpsertCacheMut.Lock()
		floorUpsertCache[key] = cache
		floorUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Floor record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Floor) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodel: no Floor provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), floorPrimaryKeyMapping)
	sql := "DELETE FROM \"floors\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete from floors")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by delete for floors")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q floorQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodel: no floorQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete all from floors")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by deleteall for floors")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FloorSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), floorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"floors\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, floorPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete all from floor slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by deleteall for floors")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Floor) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFloor(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FloorSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FloorSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), floorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"floors\".* FROM \"floors\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, floorPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to reload all in FloorSlice")
	}

	*o = slice

	return nil
}

// FloorExists checks if the Floor row exists.
func FloorExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"floors\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodel: unable to check if floors exists")
	}

	return exists, nil
}

// Exists checks if the Floor row exists.
func (o *Floor) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return FloorExists(ctx, exec, o.ID)
}
