// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodel

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// BenchmarkMetric is an object representing the database table.
type BenchmarkMetric struct {
	ID               int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	TotalRecords     int64     `boil:"total_records" json:"total_records" toml:"total_records" yaml:"total_records"`
	ProcessedRecords int64     `boil:"processed_records" json:"processed_records" toml:"processed_records" yaml:"processed_records"`
	FailedRecords    int64     `boil:"failed_records" json:"failed_records" toml:"failed_records" yaml:"failed_records"`
	StartTime        time.Time `boil:"start_time" json:"start_time" toml:"start_time" yaml:"start_time"`
	EndTime          time.Time `boil:"end_time" json:"end_time" toml:"end_time" yaml:"end_time"`
	AverageLatency   float64   `boil:"average_latency" json:"average_latency" toml:"average_latency" yaml:"average_latency"`
	Throughput       float64   `boil:"throughput" json:"throughput" toml:"throughput" yaml:"throughput"`
	BatchSize        int       `boil:"batch_size" json:"batch_size" toml:"batch_size" yaml:"batch_size"`
	DatabaseType     string    `boil:"database_type" json:"database_type" toml:"database_type" yaml:"database_type"`
	CreatedAt        null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`

	R *benchmarkMetricR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L benchmarkMetricL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BenchmarkMetricColumns = struct {
	ID               string
	TotalRecords     string
	ProcessedRecords string
	FailedRecords    string
	StartTime        string
	EndTime          string
	AverageLatency   string
	Throughput       string
	BatchSize        string
	DatabaseType     string
	CreatedAt        string
}{
	ID:               "id",
	TotalRecords:     "total_records",
	ProcessedRecords: "processed_records",
	FailedRecords:    "failed_records",
	StartTime:        "start_time",
	EndTime:          "end_time",
	AverageLatency:   "average_latency",
	Throughput:       "throughput",
	BatchSize:        "batch_size",
	DatabaseType:     "database_type",
	CreatedAt:        "created_at",
}

var BenchmarkMetricTableColumns = struct {
	ID               string
	TotalRecords     string
	ProcessedRecords string
	FailedRecords    string
	StartTime        string
	EndTime          string
	AverageLatency   string
	Throughput       string
	BatchSize        string
	DatabaseType     string
	CreatedAt        string
}{
	ID:               "benchmark_metrics.id",
	TotalRecords:     "benchmark_metrics.total_records",
	ProcessedRecords: "benchmark_metrics.processed_records",
	FailedRecords:    "benchmark_metrics.failed_records",
	StartTime:        "benchmark_metrics.start_time",
	EndTime:          "benchmark_metrics.end_time",
	AverageLatency:   "benchmark_metrics.average_latency",
	Throughput:       "benchmark_metrics.throughput",
	BatchSize:        "benchmark_metrics.batch_size",
	DatabaseType:     "benchmark_metrics.database_type",
	CreatedAt:        "benchmark_metrics.created_at",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperfloat64 struct{ field string }

func (w whereHelperfloat64) EQ(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperfloat64) NEQ(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperfloat64) LT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperfloat64) LTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperfloat64) GT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperfloat64) GTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperfloat64) IN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperfloat64) NIN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod    { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod   { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod   { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) SIMILAR(x string) qm.QueryMod { return qm.Where(w.field+" SIMILAR TO ?", x) }
func (w whereHelperstring) NSIMILAR(x string) qm.QueryMod {
	return qm.Where(w.field+" NOT SIMILAR TO ?", x)
}
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var BenchmarkMetricWhere = struct {
	ID               whereHelperint64
	TotalRecords     whereHelperint64
	ProcessedRecords whereHelperint64
	FailedRecords    whereHelperint64
	StartTime        whereHelpertime_Time
	EndTime          whereHelpertime_Time
	AverageLatency   whereHelperfloat64
	Throughput       whereHelperfloat64
	BatchSize        whereHelperint
	DatabaseType     whereHelperstring
	CreatedAt        whereHelpernull_Time
}{
	ID:               whereHelperint64{field: "\"benchmark_metrics\".\"id\""},
	TotalRecords:     whereHelperint64{field: "\"benchmark_metrics\".\"total_records\""},
	ProcessedRecords: whereHelperint64{field: "\"benchmark_metrics\".\"processed_records\""},
	FailedRecords:    whereHelperint64{field: "\"benchmark_metrics\".\"failed_records\""},
	StartTime:        whereHelpertime_Time{field: "\"benchmark_metrics\".\"start_time\""},
	EndTime:          whereHelpertime_Time{field: "\"benchmark_metrics\".\"end_time\""},
	AverageLatency:   whereHelperfloat64{field: "\"benchmark_metrics\".\"average_latency\""},
	Throughput:       whereHelperfloat64{field: "\"benchmark_metrics\".\"throughput\""},
	BatchSize:        whereHelperint{field: "\"benchmark_metrics\".\"batch_size\""},
	DatabaseType:     whereHelperstring{field: "\"benchmark_metrics\".\"database_type\""},
	CreatedAt:        whereHelpernull_Time{field: "\"benchmark_metrics\".\"created_at\""},
}

// BenchmarkMetricRels is where relationship names are stored.
var BenchmarkMetricRels = struct {
}{}

// benchmarkMetricR is where relationships are stored.
type benchmarkMetricR struct {
}

// NewStruct creates a new relationship struct
func (*benchmarkMetricR) NewStruct() *benchmarkMetricR {
	return &benchmarkMetricR{}
}

// benchmarkMetricL is where Load methods for each relationship are stored.
type benchmarkMetricL struct{}

var (
	benchmarkMetricAllColumns            = []string{"id", "total_records", "processed_records", "failed_records", "start_time", "end_time", "average_latency", "throughput", "batch_size", "database_type", "created_at"}
	benchmarkMetricColumnsWithoutDefault = []string{"total_records", "processed_records", "failed_records", "start_time", "end_time", "average_latency", "throughput", "batch_size", "database_type"}
	benchmarkMetricColumnsWithDefault    = []string{"id", "created_at"}
	benchmarkMetricPrimaryKeyColumns     = []string{"id"}
	benchmarkMetricGeneratedColumns      = []string{}
)

type (
	// BenchmarkMetricSlice is an alias for a slice of pointers to BenchmarkMetric.
	// This should almost always be used instead of []BenchmarkMetric.
	BenchmarkMetricSlice []*BenchmarkMetric

	benchmarkMetricQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	benchmarkMetricType                 = reflect.TypeOf(&BenchmarkMetric{})
	benchmarkMetricMapping              = queries.MakeStructMapping(benchmarkMetricType)
	benchmarkMetricPrimaryKeyMapping, _ = queries.BindMapping(benchmarkMetricType, benchmarkMetricMapping, benchmarkMetricPrimaryKeyColumns)
	benchmarkMetricInsertCacheMut       sync.RWMutex
	benchmarkMetricInsertCache          = make(map[string]insertCache)
	benchmarkMetricUpdateCacheMut       sync.RWMutex
	benchmarkMetricUpdateCache          = make(map[string]updateCache)
	benchmarkMetricUpsertCacheMut       sync.RWMutex
	benchmarkMetricUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single benchmarkMetric record from the query.
func (q benchmarkMetricQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BenchmarkMetric, error) {
	o := &BenchmarkMetric{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodel: failed to execute a one query for benchmark_metrics")
	}

	return o, nil
}

// All returns all BenchmarkMetric records from the query.
func (q benchmarkMetricQuery) All(ctx context.Context, exec boil.ContextExecutor) (BenchmarkMetricSlice, error) {
	var o []*BenchmarkMetric

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodel: failed to assign all query results to BenchmarkMetric slice")
	}

	return o, nil
}

// Count returns the count of all BenchmarkMetric records in the query.
func (q benchmarkMetricQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to count benchmark_metrics rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q benchmarkMetricQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodel: failed to check if benchmark_metrics exists")
	}

	return count > 0, nil
}

// BenchmarkMetrics retrieves all the records using an executor.
func BenchmarkMetrics(mods ...qm.QueryMod) benchmarkMetricQuery {
	mods = append(mods, qm.From("\"benchmark_metrics\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"benchmark_metrics\".*"})
	}

	return benchmarkMetricQuery{q}
}

// FindBenchmarkMetric retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBenchmarkMetric(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*BenchmarkMetric, error) {
	benchmarkMetricObj := &BenchmarkMetric{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"benchmark_metrics\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, benchmarkMetricObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodel: unable to select from benchmark_metrics")
	}

	return benchmarkMetricObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BenchmarkMetric) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodel: no benchmark_metrics provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(benchmarkMetricColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	benchmarkMetricInsertCacheMut.RLock()
	cache, cached := benchmarkMetricInsertCache[key]
	benchmarkMetricInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			benchmarkMetricAllColumns,
			benchmarkMetricColumnsWithDefault,
			benchmarkMetricColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(benchmarkMetricType, benchmarkMetricMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(benchmarkMetricType, benchmarkMetricMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"benchmark_metrics\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"benchmark_metrics\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to insert into benchmark_metrics")
	}

	if !cached {
		benchmarkMetricInsertCacheMut.Lock()
		benchmarkMetricInsertCache[key] = cache
		benchmarkMetricInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the BenchmarkMetric.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BenchmarkMetric) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	benchmarkMetricUpdateCacheMut.RLock()
	cache, cached := benchmarkMetricUpdateCache[key]
	benchmarkMetricUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			benchmarkMetricAllColumns,
			benchmarkMetricPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodel: unable to update benchmark_metrics, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"benchmark_metrics\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, benchmarkMetricPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(benchmarkMetricType, benchmarkMetricMapping, append(wl, benchmarkMetricPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update benchmark_metrics row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by update for benchmark_metrics")
	}

	if !cached {
		benchmarkMetricUpdateCacheMut.Lock()
		benchmarkMetricUpdateCache[key] = cache
		benchmarkMetricUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q benchmarkMetricQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update all for benchmark_metrics")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to retrieve rows affected for benchmark_metrics")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BenchmarkMetricSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodel: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), benchmarkMetricPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"benchmark_metrics\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, benchmarkMetricPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update all in benchmarkMetric slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to retrieve rows affected all in update all benchmarkMetric")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BenchmarkMetric) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("dbmodel: no benchmark_metrics provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(benchmarkMetricColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	benchmarkMetricUpsertCacheMut.RLock()
	cache, cached := benchmarkMetricUpsertCache[key]
	benchmarkMetricUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			benchmarkMetricAllColumns,
			benchmarkMetricColumnsWithDefault,
			benchmarkMetricColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			benchmarkMetricAllColumns,
			benchmarkMetricPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dbmodel: unable to upsert benchmark_metrics, could not build update column list")
		}

		ret := strmangle.SetComplement(benchmarkMetricAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(benchmarkMetricPrimaryKeyColumns) == 0 {
				return errors.New("dbmodel: unable to upsert benchmark_metrics, could not build conflict column list")
			}

			conflict = make([]string, len(benchmarkMetricPrimaryKeyColumns))
			copy(conflict, benchmarkMetricPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"benchmark_metrics\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(benchmarkMetricType, benchmarkMetricMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(benchmarkMetricType, benchmarkMetricMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to upsert benchmark_metrics")
	}

	if !cached {
		benchmarkMetricUpsertCacheMut.Lock()
		benchmarkMetricUpsertCache[key] = cache
		benchmarkMetricUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single BenchmarkMetric record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BenchmarkMetric) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodel: no BenchmarkMetric provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), benchmarkMetricPrimaryKeyMapping)
	sql := "DELETE FROM \"benchmark_metrics\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete from benchmark_metrics")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by delete for benchmark_metrics")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q benchmarkMetricQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodel: no benchmarkMetricQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete all from benchmark_metrics")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by deleteall for benchmark_metrics")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BenchmarkMetricSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), benchmarkMetricPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"benchmark_metrics\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, benchmarkMetricPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete all from benchmarkMetric slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by deleteall for benchmark_metrics")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BenchmarkMetric) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBenchmarkMetric(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BenchmarkMetricSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BenchmarkMetricSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), benchmarkMetricPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"benchmark_metrics\".* FROM \"benchmark_metrics\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, benchmarkMetricPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to reload all in BenchmarkMetricSlice")
	}

	*o = slice

	return nil
}

// BenchmarkMetricExists checks if the BenchmarkMetric row exists.
func BenchmarkMetricExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"benchmark_metrics\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodel: unable to check if benchmark_metrics exists")
	}

	return exists, nil
}

// Exists checks if the BenchmarkMetric row exists.
func (o *BenchmarkMetric) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return BenchmarkMetricExists(ctx, exec, o.ID)
}
