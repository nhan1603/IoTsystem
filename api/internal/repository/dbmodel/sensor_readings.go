// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodel

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// SensorReading is an object representing the database table.
type SensorReading struct {
	ID          int64        `boil:"id" json:"id" toml:"id" yaml:"id"`
	DeviceID    string       `boil:"device_id" json:"device_id" toml:"device_id" yaml:"device_id"`
	DeviceName  string       `boil:"device_name" json:"device_name" toml:"device_name" yaml:"device_name"`
	DeviceType  string       `boil:"device_type" json:"device_type" toml:"device_type" yaml:"device_type"`
	Location    string       `boil:"location" json:"location" toml:"location" yaml:"location"`
	Floor       int          `boil:"floor" json:"floor" toml:"floor" yaml:"floor"`
	Zone        string       `boil:"zone" json:"zone" toml:"zone" yaml:"zone"`
	Temperature null.Float64 `boil:"temperature" json:"temperature,omitempty" toml:"temperature" yaml:"temperature,omitempty"`
	Humidity    null.Float64 `boil:"humidity" json:"humidity,omitempty" toml:"humidity" yaml:"humidity,omitempty"`
	Co2         null.Float64 `boil:"co2" json:"co2,omitempty" toml:"co2" yaml:"co2,omitempty"`
	Timestamp   time.Time    `boil:"timestamp" json:"timestamp" toml:"timestamp" yaml:"timestamp"`
	CreatedAt   null.Time    `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`

	R *sensorReadingR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sensorReadingL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SensorReadingColumns = struct {
	ID          string
	DeviceID    string
	DeviceName  string
	DeviceType  string
	Location    string
	Floor       string
	Zone        string
	Temperature string
	Humidity    string
	Co2         string
	Timestamp   string
	CreatedAt   string
}{
	ID:          "id",
	DeviceID:    "device_id",
	DeviceName:  "device_name",
	DeviceType:  "device_type",
	Location:    "location",
	Floor:       "floor",
	Zone:        "zone",
	Temperature: "temperature",
	Humidity:    "humidity",
	Co2:         "co2",
	Timestamp:   "timestamp",
	CreatedAt:   "created_at",
}

var SensorReadingTableColumns = struct {
	ID          string
	DeviceID    string
	DeviceName  string
	DeviceType  string
	Location    string
	Floor       string
	Zone        string
	Temperature string
	Humidity    string
	Co2         string
	Timestamp   string
	CreatedAt   string
}{
	ID:          "sensor_readings.id",
	DeviceID:    "sensor_readings.device_id",
	DeviceName:  "sensor_readings.device_name",
	DeviceType:  "sensor_readings.device_type",
	Location:    "sensor_readings.location",
	Floor:       "sensor_readings.floor",
	Zone:        "sensor_readings.zone",
	Temperature: "sensor_readings.temperature",
	Humidity:    "sensor_readings.humidity",
	Co2:         "sensor_readings.co2",
	Timestamp:   "sensor_readings.timestamp",
	CreatedAt:   "sensor_readings.created_at",
}

// Generated where

type whereHelpernull_Float64 struct{ field string }

func (w whereHelpernull_Float64) EQ(x null.Float64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Float64) NEQ(x null.Float64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Float64) LT(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Float64) LTE(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Float64) GT(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Float64) GTE(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Float64) IN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Float64) NIN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Float64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Float64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var SensorReadingWhere = struct {
	ID          whereHelperint64
	DeviceID    whereHelperstring
	DeviceName  whereHelperstring
	DeviceType  whereHelperstring
	Location    whereHelperstring
	Floor       whereHelperint
	Zone        whereHelperstring
	Temperature whereHelpernull_Float64
	Humidity    whereHelpernull_Float64
	Co2         whereHelpernull_Float64
	Timestamp   whereHelpertime_Time
	CreatedAt   whereHelpernull_Time
}{
	ID:          whereHelperint64{field: "\"sensor_readings\".\"id\""},
	DeviceID:    whereHelperstring{field: "\"sensor_readings\".\"device_id\""},
	DeviceName:  whereHelperstring{field: "\"sensor_readings\".\"device_name\""},
	DeviceType:  whereHelperstring{field: "\"sensor_readings\".\"device_type\""},
	Location:    whereHelperstring{field: "\"sensor_readings\".\"location\""},
	Floor:       whereHelperint{field: "\"sensor_readings\".\"floor\""},
	Zone:        whereHelperstring{field: "\"sensor_readings\".\"zone\""},
	Temperature: whereHelpernull_Float64{field: "\"sensor_readings\".\"temperature\""},
	Humidity:    whereHelpernull_Float64{field: "\"sensor_readings\".\"humidity\""},
	Co2:         whereHelpernull_Float64{field: "\"sensor_readings\".\"co2\""},
	Timestamp:   whereHelpertime_Time{field: "\"sensor_readings\".\"timestamp\""},
	CreatedAt:   whereHelpernull_Time{field: "\"sensor_readings\".\"created_at\""},
}

// SensorReadingRels is where relationship names are stored.
var SensorReadingRels = struct {
}{}

// sensorReadingR is where relationships are stored.
type sensorReadingR struct {
}

// NewStruct creates a new relationship struct
func (*sensorReadingR) NewStruct() *sensorReadingR {
	return &sensorReadingR{}
}

// sensorReadingL is where Load methods for each relationship are stored.
type sensorReadingL struct{}

var (
	sensorReadingAllColumns            = []string{"id", "device_id", "device_name", "device_type", "location", "floor", "zone", "temperature", "humidity", "co2", "timestamp", "created_at"}
	sensorReadingColumnsWithoutDefault = []string{"device_id", "device_name", "device_type", "location", "floor", "zone", "timestamp"}
	sensorReadingColumnsWithDefault    = []string{"id", "temperature", "humidity", "co2", "created_at"}
	sensorReadingPrimaryKeyColumns     = []string{"id", "timestamp"}
	sensorReadingGeneratedColumns      = []string{}
)

type (
	// SensorReadingSlice is an alias for a slice of pointers to SensorReading.
	// This should almost always be used instead of []SensorReading.
	SensorReadingSlice []*SensorReading

	sensorReadingQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sensorReadingType                 = reflect.TypeOf(&SensorReading{})
	sensorReadingMapping              = queries.MakeStructMapping(sensorReadingType)
	sensorReadingPrimaryKeyMapping, _ = queries.BindMapping(sensorReadingType, sensorReadingMapping, sensorReadingPrimaryKeyColumns)
	sensorReadingInsertCacheMut       sync.RWMutex
	sensorReadingInsertCache          = make(map[string]insertCache)
	sensorReadingUpdateCacheMut       sync.RWMutex
	sensorReadingUpdateCache          = make(map[string]updateCache)
	sensorReadingUpsertCacheMut       sync.RWMutex
	sensorReadingUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single sensorReading record from the query.
func (q sensorReadingQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SensorReading, error) {
	o := &SensorReading{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodel: failed to execute a one query for sensor_readings")
	}

	return o, nil
}

// All returns all SensorReading records from the query.
func (q sensorReadingQuery) All(ctx context.Context, exec boil.ContextExecutor) (SensorReadingSlice, error) {
	var o []*SensorReading

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodel: failed to assign all query results to SensorReading slice")
	}

	return o, nil
}

// Count returns the count of all SensorReading records in the query.
func (q sensorReadingQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to count sensor_readings rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sensorReadingQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodel: failed to check if sensor_readings exists")
	}

	return count > 0, nil
}

// SensorReadings retrieves all the records using an executor.
func SensorReadings(mods ...qm.QueryMod) sensorReadingQuery {
	mods = append(mods, qm.From("\"sensor_readings\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"sensor_readings\".*"})
	}

	return sensorReadingQuery{q}
}

// FindSensorReading retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSensorReading(ctx context.Context, exec boil.ContextExecutor, iD int64, timestamp time.Time, selectCols ...string) (*SensorReading, error) {
	sensorReadingObj := &SensorReading{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"sensor_readings\" where \"id\"=$1 AND \"timestamp\"=$2", sel,
	)

	q := queries.Raw(query, iD, timestamp)

	err := q.Bind(ctx, exec, sensorReadingObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodel: unable to select from sensor_readings")
	}

	return sensorReadingObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SensorReading) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodel: no sensor_readings provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(sensorReadingColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sensorReadingInsertCacheMut.RLock()
	cache, cached := sensorReadingInsertCache[key]
	sensorReadingInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sensorReadingAllColumns,
			sensorReadingColumnsWithDefault,
			sensorReadingColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sensorReadingType, sensorReadingMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sensorReadingType, sensorReadingMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"sensor_readings\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"sensor_readings\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to insert into sensor_readings")
	}

	if !cached {
		sensorReadingInsertCacheMut.Lock()
		sensorReadingInsertCache[key] = cache
		sensorReadingInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the SensorReading.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SensorReading) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	sensorReadingUpdateCacheMut.RLock()
	cache, cached := sensorReadingUpdateCache[key]
	sensorReadingUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sensorReadingAllColumns,
			sensorReadingPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodel: unable to update sensor_readings, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"sensor_readings\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, sensorReadingPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sensorReadingType, sensorReadingMapping, append(wl, sensorReadingPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update sensor_readings row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by update for sensor_readings")
	}

	if !cached {
		sensorReadingUpdateCacheMut.Lock()
		sensorReadingUpdateCache[key] = cache
		sensorReadingUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q sensorReadingQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update all for sensor_readings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to retrieve rows affected for sensor_readings")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SensorReadingSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodel: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sensorReadingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"sensor_readings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, sensorReadingPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update all in sensorReading slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to retrieve rows affected all in update all sensorReading")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SensorReading) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("dbmodel: no sensor_readings provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(sensorReadingColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sensorReadingUpsertCacheMut.RLock()
	cache, cached := sensorReadingUpsertCache[key]
	sensorReadingUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			sensorReadingAllColumns,
			sensorReadingColumnsWithDefault,
			sensorReadingColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sensorReadingAllColumns,
			sensorReadingPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dbmodel: unable to upsert sensor_readings, could not build update column list")
		}

		ret := strmangle.SetComplement(sensorReadingAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(sensorReadingPrimaryKeyColumns) == 0 {
				return errors.New("dbmodel: unable to upsert sensor_readings, could not build conflict column list")
			}

			conflict = make([]string, len(sensorReadingPrimaryKeyColumns))
			copy(conflict, sensorReadingPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"sensor_readings\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(sensorReadingType, sensorReadingMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sensorReadingType, sensorReadingMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to upsert sensor_readings")
	}

	if !cached {
		sensorReadingUpsertCacheMut.Lock()
		sensorReadingUpsertCache[key] = cache
		sensorReadingUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single SensorReading record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SensorReading) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodel: no SensorReading provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sensorReadingPrimaryKeyMapping)
	sql := "DELETE FROM \"sensor_readings\" WHERE \"id\"=$1 AND \"timestamp\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete from sensor_readings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by delete for sensor_readings")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sensorReadingQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodel: no sensorReadingQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete all from sensor_readings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by deleteall for sensor_readings")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SensorReadingSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sensorReadingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"sensor_readings\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, sensorReadingPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete all from sensorReading slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by deleteall for sensor_readings")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SensorReading) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSensorReading(ctx, exec, o.ID, o.Timestamp)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SensorReadingSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SensorReadingSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sensorReadingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"sensor_readings\".* FROM \"sensor_readings\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, sensorReadingPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to reload all in SensorReadingSlice")
	}

	*o = slice

	return nil
}

// SensorReadingExists checks if the SensorReading row exists.
func SensorReadingExists(ctx context.Context, exec boil.ContextExecutor, iD int64, timestamp time.Time) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"sensor_readings\" where \"id\"=$1 AND \"timestamp\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD, timestamp)
	}
	row := exec.QueryRowContext(ctx, sql, iD, timestamp)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodel: unable to check if sensor_readings exists")
	}

	return exists, nil
}

// Exists checks if the SensorReading row exists.
func (o *SensorReading) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SensorReadingExists(ctx, exec, o.ID, o.Timestamp)
}
