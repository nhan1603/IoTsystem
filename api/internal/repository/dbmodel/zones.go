// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodel

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// Zone is an object representing the database table.
type Zone struct {
	ID          int          `boil:"id" json:"id" toml:"id" yaml:"id"`
	FloorID     null.Int     `boil:"floor_id" json:"floor_id,omitempty" toml:"floor_id" yaml:"floor_id,omitempty"`
	ZoneName    string       `boil:"zone_name" json:"zone_name" toml:"zone_name" yaml:"zone_name"`
	ZoneType    string       `boil:"zone_type" json:"zone_type" toml:"zone_type" yaml:"zone_type"`
	Description null.String  `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	Area        null.Float64 `boil:"area" json:"area,omitempty" toml:"area" yaml:"area,omitempty"`
	CreatedAt   null.Time    `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt   null.Time    `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *zoneR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L zoneL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ZoneColumns = struct {
	ID          string
	FloorID     string
	ZoneName    string
	ZoneType    string
	Description string
	Area        string
	CreatedAt   string
	UpdatedAt   string
}{
	ID:          "id",
	FloorID:     "floor_id",
	ZoneName:    "zone_name",
	ZoneType:    "zone_type",
	Description: "description",
	Area:        "area",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
}

var ZoneTableColumns = struct {
	ID          string
	FloorID     string
	ZoneName    string
	ZoneType    string
	Description string
	Area        string
	CreatedAt   string
	UpdatedAt   string
}{
	ID:          "zones.id",
	FloorID:     "zones.floor_id",
	ZoneName:    "zones.zone_name",
	ZoneType:    "zones.zone_type",
	Description: "zones.description",
	Area:        "zones.area",
	CreatedAt:   "zones.created_at",
	UpdatedAt:   "zones.updated_at",
}

// Generated where

var ZoneWhere = struct {
	ID          whereHelperint
	FloorID     whereHelpernull_Int
	ZoneName    whereHelperstring
	ZoneType    whereHelperstring
	Description whereHelpernull_String
	Area        whereHelpernull_Float64
	CreatedAt   whereHelpernull_Time
	UpdatedAt   whereHelpernull_Time
}{
	ID:          whereHelperint{field: "\"zones\".\"id\""},
	FloorID:     whereHelpernull_Int{field: "\"zones\".\"floor_id\""},
	ZoneName:    whereHelperstring{field: "\"zones\".\"zone_name\""},
	ZoneType:    whereHelperstring{field: "\"zones\".\"zone_type\""},
	Description: whereHelpernull_String{field: "\"zones\".\"description\""},
	Area:        whereHelpernull_Float64{field: "\"zones\".\"area\""},
	CreatedAt:   whereHelpernull_Time{field: "\"zones\".\"created_at\""},
	UpdatedAt:   whereHelpernull_Time{field: "\"zones\".\"updated_at\""},
}

// ZoneRels is where relationship names are stored.
var ZoneRels = struct {
	Floor          string
	IotDevices     string
	SensorReadings string
}{
	Floor:          "Floor",
	IotDevices:     "IotDevices",
	SensorReadings: "SensorReadings",
}

// zoneR is where relationships are stored.
type zoneR struct {
	Floor          *Floor             `boil:"Floor" json:"Floor" toml:"Floor" yaml:"Floor"`
	IotDevices     IotDeviceSlice     `boil:"IotDevices" json:"IotDevices" toml:"IotDevices" yaml:"IotDevices"`
	SensorReadings SensorReadingSlice `boil:"SensorReadings" json:"SensorReadings" toml:"SensorReadings" yaml:"SensorReadings"`
}

// NewStruct creates a new relationship struct
func (*zoneR) NewStruct() *zoneR {
	return &zoneR{}
}

func (o *Zone) GetFloor() *Floor {
	if o == nil {
		return nil
	}

	return o.R.GetFloor()
}

func (r *zoneR) GetFloor() *Floor {
	if r == nil {
		return nil
	}

	return r.Floor
}

func (o *Zone) GetIotDevices() IotDeviceSlice {
	if o == nil {
		return nil
	}

	return o.R.GetIotDevices()
}

func (r *zoneR) GetIotDevices() IotDeviceSlice {
	if r == nil {
		return nil
	}

	return r.IotDevices
}

func (o *Zone) GetSensorReadings() SensorReadingSlice {
	if o == nil {
		return nil
	}

	return o.R.GetSensorReadings()
}

func (r *zoneR) GetSensorReadings() SensorReadingSlice {
	if r == nil {
		return nil
	}

	return r.SensorReadings
}

// zoneL is where Load methods for each relationship are stored.
type zoneL struct{}

var (
	zoneAllColumns            = []string{"id", "floor_id", "zone_name", "zone_type", "description", "area", "created_at", "updated_at"}
	zoneColumnsWithoutDefault = []string{"zone_name", "zone_type"}
	zoneColumnsWithDefault    = []string{"id", "floor_id", "description", "area", "created_at", "updated_at"}
	zonePrimaryKeyColumns     = []string{"id"}
	zoneGeneratedColumns      = []string{}
)

type (
	// ZoneSlice is an alias for a slice of pointers to Zone.
	// This should almost always be used instead of []Zone.
	ZoneSlice []*Zone

	zoneQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	zoneType                 = reflect.TypeOf(&Zone{})
	zoneMapping              = queries.MakeStructMapping(zoneType)
	zonePrimaryKeyMapping, _ = queries.BindMapping(zoneType, zoneMapping, zonePrimaryKeyColumns)
	zoneInsertCacheMut       sync.RWMutex
	zoneInsertCache          = make(map[string]insertCache)
	zoneUpdateCacheMut       sync.RWMutex
	zoneUpdateCache          = make(map[string]updateCache)
	zoneUpsertCacheMut       sync.RWMutex
	zoneUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single zone record from the query.
func (q zoneQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Zone, error) {
	o := &Zone{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodel: failed to execute a one query for zones")
	}

	return o, nil
}

// All returns all Zone records from the query.
func (q zoneQuery) All(ctx context.Context, exec boil.ContextExecutor) (ZoneSlice, error) {
	var o []*Zone

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodel: failed to assign all query results to Zone slice")
	}

	return o, nil
}

// Count returns the count of all Zone records in the query.
func (q zoneQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to count zones rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q zoneQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodel: failed to check if zones exists")
	}

	return count > 0, nil
}

// Floor pointed to by the foreign key.
func (o *Zone) Floor(mods ...qm.QueryMod) floorQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FloorID),
	}

	queryMods = append(queryMods, mods...)

	return Floors(queryMods...)
}

// IotDevices retrieves all the iot_device's IotDevices with an executor.
func (o *Zone) IotDevices(mods ...qm.QueryMod) iotDeviceQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"iot_devices\".\"zone_id\"=?", o.ID),
	)

	return IotDevices(queryMods...)
}

// SensorReadings retrieves all the sensor_reading's SensorReadings with an executor.
func (o *Zone) SensorReadings(mods ...qm.QueryMod) sensorReadingQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"sensor_readings\".\"zone_id\"=?", o.ID),
	)

	return SensorReadings(queryMods...)
}

// LoadFloor allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (zoneL) LoadFloor(ctx context.Context, e boil.ContextExecutor, singular bool, maybeZone interface{}, mods queries.Applicator) error {
	var slice []*Zone
	var object *Zone

	if singular {
		var ok bool
		object, ok = maybeZone.(*Zone)
		if !ok {
			object = new(Zone)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeZone)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeZone))
			}
		}
	} else {
		s, ok := maybeZone.(*[]*Zone)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeZone)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeZone))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &zoneR{}
		}
		if !queries.IsNil(object.FloorID) {
			args[object.FloorID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &zoneR{}
			}

			if !queries.IsNil(obj.FloorID) {
				args[obj.FloorID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`floors`),
		qm.WhereIn(`floors.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Floor")
	}

	var resultSlice []*Floor
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Floor")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for floors")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for floors")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Floor = foreign
		if foreign.R == nil {
			foreign.R = &floorR{}
		}
		foreign.R.Zones = append(foreign.R.Zones, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.FloorID, foreign.ID) {
				local.R.Floor = foreign
				if foreign.R == nil {
					foreign.R = &floorR{}
				}
				foreign.R.Zones = append(foreign.R.Zones, local)
				break
			}
		}
	}

	return nil
}

// LoadIotDevices allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (zoneL) LoadIotDevices(ctx context.Context, e boil.ContextExecutor, singular bool, maybeZone interface{}, mods queries.Applicator) error {
	var slice []*Zone
	var object *Zone

	if singular {
		var ok bool
		object, ok = maybeZone.(*Zone)
		if !ok {
			object = new(Zone)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeZone)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeZone))
			}
		}
	} else {
		s, ok := maybeZone.(*[]*Zone)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeZone)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeZone))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &zoneR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &zoneR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`iot_devices`),
		qm.WhereIn(`iot_devices.zone_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load iot_devices")
	}

	var resultSlice []*IotDevice
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice iot_devices")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on iot_devices")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for iot_devices")
	}

	if singular {
		object.R.IotDevices = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &iotDeviceR{}
			}
			foreign.R.Zone = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ZoneID {
				local.R.IotDevices = append(local.R.IotDevices, foreign)
				if foreign.R == nil {
					foreign.R = &iotDeviceR{}
				}
				foreign.R.Zone = local
				break
			}
		}
	}

	return nil
}

// LoadSensorReadings allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (zoneL) LoadSensorReadings(ctx context.Context, e boil.ContextExecutor, singular bool, maybeZone interface{}, mods queries.Applicator) error {
	var slice []*Zone
	var object *Zone

	if singular {
		var ok bool
		object, ok = maybeZone.(*Zone)
		if !ok {
			object = new(Zone)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeZone)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeZone))
			}
		}
	} else {
		s, ok := maybeZone.(*[]*Zone)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeZone)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeZone))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &zoneR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &zoneR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`sensor_readings`),
		qm.WhereIn(`sensor_readings.zone_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sensor_readings")
	}

	var resultSlice []*SensorReading
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sensor_readings")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sensor_readings")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sensor_readings")
	}

	if singular {
		object.R.SensorReadings = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sensorReadingR{}
			}
			foreign.R.Zone = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ZoneID {
				local.R.SensorReadings = append(local.R.SensorReadings, foreign)
				if foreign.R == nil {
					foreign.R = &sensorReadingR{}
				}
				foreign.R.Zone = local
				break
			}
		}
	}

	return nil
}

// SetFloor of the zone to the related item.
// Sets o.R.Floor to related.
// Adds o to related.R.Zones.
func (o *Zone) SetFloor(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Floor) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"zones\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"floor_id"}),
		strmangle.WhereClause("\"", "\"", 2, zonePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.FloorID, related.ID)
	if o.R == nil {
		o.R = &zoneR{
			Floor: related,
		}
	} else {
		o.R.Floor = related
	}

	if related.R == nil {
		related.R = &floorR{
			Zones: ZoneSlice{o},
		}
	} else {
		related.R.Zones = append(related.R.Zones, o)
	}

	return nil
}

// RemoveFloor relationship.
// Sets o.R.Floor to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Zone) RemoveFloor(ctx context.Context, exec boil.ContextExecutor, related *Floor) error {
	var err error

	queries.SetScanner(&o.FloorID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("floor_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Floor = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Zones {
		if queries.Equal(o.FloorID, ri.FloorID) {
			continue
		}

		ln := len(related.R.Zones)
		if ln > 1 && i < ln-1 {
			related.R.Zones[i] = related.R.Zones[ln-1]
		}
		related.R.Zones = related.R.Zones[:ln-1]
		break
	}
	return nil
}

// AddIotDevices adds the given related objects to the existing relationships
// of the zone, optionally inserting them as new records.
// Appends related to o.R.IotDevices.
// Sets related.R.Zone appropriately.
func (o *Zone) AddIotDevices(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*IotDevice) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ZoneID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"iot_devices\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"zone_id"}),
				strmangle.WhereClause("\"", "\"", 2, iotDevicePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ZoneID = o.ID
		}
	}

	if o.R == nil {
		o.R = &zoneR{
			IotDevices: related,
		}
	} else {
		o.R.IotDevices = append(o.R.IotDevices, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &iotDeviceR{
				Zone: o,
			}
		} else {
			rel.R.Zone = o
		}
	}
	return nil
}

// AddSensorReadings adds the given related objects to the existing relationships
// of the zone, optionally inserting them as new records.
// Appends related to o.R.SensorReadings.
// Sets related.R.Zone appropriately.
func (o *Zone) AddSensorReadings(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SensorReading) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ZoneID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"sensor_readings\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"zone_id"}),
				strmangle.WhereClause("\"", "\"", 2, sensorReadingPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID, rel.Timestamp}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ZoneID = o.ID
		}
	}

	if o.R == nil {
		o.R = &zoneR{
			SensorReadings: related,
		}
	} else {
		o.R.SensorReadings = append(o.R.SensorReadings, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sensorReadingR{
				Zone: o,
			}
		} else {
			rel.R.Zone = o
		}
	}
	return nil
}

// Zones retrieves all the records using an executor.
func Zones(mods ...qm.QueryMod) zoneQuery {
	mods = append(mods, qm.From("\"zones\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"zones\".*"})
	}

	return zoneQuery{q}
}

// FindZone retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindZone(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Zone, error) {
	zoneObj := &Zone{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"zones\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, zoneObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodel: unable to select from zones")
	}

	return zoneObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Zone) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodel: no zones provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(zoneColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	zoneInsertCacheMut.RLock()
	cache, cached := zoneInsertCache[key]
	zoneInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			zoneAllColumns,
			zoneColumnsWithDefault,
			zoneColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(zoneType, zoneMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(zoneType, zoneMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"zones\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"zones\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to insert into zones")
	}

	if !cached {
		zoneInsertCacheMut.Lock()
		zoneInsertCache[key] = cache
		zoneInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Zone.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Zone) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	key := makeCacheKey(columns, nil)
	zoneUpdateCacheMut.RLock()
	cache, cached := zoneUpdateCache[key]
	zoneUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			zoneAllColumns,
			zonePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodel: unable to update zones, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"zones\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, zonePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(zoneType, zoneMapping, append(wl, zonePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update zones row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by update for zones")
	}

	if !cached {
		zoneUpdateCacheMut.Lock()
		zoneUpdateCache[key] = cache
		zoneUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q zoneQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update all for zones")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to retrieve rows affected for zones")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ZoneSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodel: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), zonePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"zones\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, zonePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update all in zone slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to retrieve rows affected all in update all zone")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Zone) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("dbmodel: no zones provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	nzDefaults := queries.NonZeroDefaultSet(zoneColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	zoneUpsertCacheMut.RLock()
	cache, cached := zoneUpsertCache[key]
	zoneUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			zoneAllColumns,
			zoneColumnsWithDefault,
			zoneColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			zoneAllColumns,
			zonePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dbmodel: unable to upsert zones, could not build update column list")
		}

		ret := strmangle.SetComplement(zoneAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(zonePrimaryKeyColumns) == 0 {
				return errors.New("dbmodel: unable to upsert zones, could not build conflict column list")
			}

			conflict = make([]string, len(zonePrimaryKeyColumns))
			copy(conflict, zonePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"zones\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(zoneType, zoneMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(zoneType, zoneMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to upsert zones")
	}

	if !cached {
		zoneUpsertCacheMut.Lock()
		zoneUpsertCache[key] = cache
		zoneUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Zone record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Zone) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodel: no Zone provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), zonePrimaryKeyMapping)
	sql := "DELETE FROM \"zones\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete from zones")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by delete for zones")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q zoneQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodel: no zoneQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete all from zones")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by deleteall for zones")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ZoneSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), zonePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"zones\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, zonePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete all from zone slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by deleteall for zones")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Zone) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindZone(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ZoneSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ZoneSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), zonePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"zones\".* FROM \"zones\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, zonePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to reload all in ZoneSlice")
	}

	*o = slice

	return nil
}

// ZoneExists checks if the Zone row exists.
func ZoneExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"zones\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodel: unable to check if zones exists")
	}

	return exists, nil
}

// Exists checks if the Zone row exists.
func (o *Zone) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ZoneExists(ctx, exec, o.ID)
}
