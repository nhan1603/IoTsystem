services:
  database:
    container_name: pg
    image: timescale/timescaledb:latest-pg15
    restart: always
    networks:
      - network
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: iotsystem-pg
      TIMESCALEDB_TELEMETRY: "off"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 10s
      retries: 3
    ports:
      - "5432:5432"
    volumes:
      - data:/var/lib/postgresql/data
    command:
      - "-c"
      - "max_connections=200"
      - "-c"
      - "shared_buffers=512MB"
      - "-c"
      - "timescaledb.telemetry_level=off"
      - "-c"
      - "timescaledb.max_background_workers=8"
      - "-c"
      - "shared_preload_libraries=timescaledb"

  migrate:
    image: migrate/migrate:v4.15.2
    profiles: ["tools"]
    networks:
      - network
    volumes:
      - ../api/data/migrations:/migrations
    entrypoint:
      [
        "migrate",
        "-path",
        "/migrations",
        "-database",
        "postgres://postgres:postgres@database:5432/iotsystem-pg?sslmode=disable",
      ]
    command: ["up"]
    depends_on:
      database:
        condition: service_healthy

  server:
    container_name: api
    image: iotsystem-go-local:latest
    working_dir: /app
    volumes:
      - ../api:/app
    command: go run -mod=vendor cmd/entrypoint/main.go cmd/entrypoint/router.go
    ports:
      - "3001:3001"
    networks:
      - network
    depends_on:
      - database
    environment:
      PG_URL: postgres://postgres:postgres@database:5432/iotsystem-pg?sslmode=disable
      KAFKA_BROKER: "kafka:9092"
      IOT_TOPIC: "iot.sensor"
      BATCH_SIZE: "100"
      BATCH_TIMEOUT: "100s"
      SERVER_ADDR: ":3001"
      DB_BACKEND: "cassandra"
      # Cassandra config
      CASSANDRA_HOSTS: "cass1:9042"
      CASSANDRA_KEYSPACE: "iotsystem"
      CASSANDRA_USERNAME: "cassandra"
      CASSANDRA_PASSWORD: "cassandra"
      CASSANDRA_CONSISTENCY: "ONE"

  zookeeper:
    container_name: iot-zookeeper
    networks:
      - network
    image: confluentinc/cp-zookeeper:7.3.3
    ports:
      - "2181:2181"
    hostname: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
  kafka:
    container_name: iot-kafka
    networks:
      - network
    image: confluentinc/cp-kafka:7.3.3
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: DOCKER://0.0.0.0:9092,LOCALHOST://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: DOCKER://kafka:9092,LOCALHOST://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: DOCKER:PLAINTEXT,LOCALHOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  kafka-topic:
    image: confluentinc/cp-kafka:7.3.3
    networks:
      - network
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:9092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic iot.sensor --replication-factor 1 --partitions 6

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:9092 --list
      "

  simulator:
    container_name: simulator
    image: iotsystem-go-local:latest
    working_dir: /app
    volumes:
      - ../api:/app
    command: go run -mod=vendor cmd/simulator/main.go
    networks:
      - network
    environment:
      PG_URL: postgres://postgres:postgres@database:5432/iotsystem-pg?sslmode=disable
      KAFKA_BROKER: "kafka:9092"
      IOT_TOPIC: "iot.sensor"
      PRODUCER_RATE: "100"
      DB_BACKEND: "cassandra"
      # Cassandra config
      CASSANDRA_HOSTS: "cass1:9042"
      CASSANDRA_KEYSPACE: "iotsystem"
      CASSANDRA_USERNAME: "cassandra"
      CASSANDRA_PASSWORD: "cassandra"
      CASSANDRA_CONSISTENCY: "ONE"

  cassandra:
    image: cassandra:5.0
    container_name: cass1
    environment:
      - CASSANDRA_CLUSTER_NAME=iot_cluster
      - CASSANDRA_DC=datacenter1
      - CASSANDRA_ENDPOINT_SNITCH=SimpleSnitch
      - CASSANDRA_SEEDS=cass1
       # Add authentication
      - CASSANDRA_AUTHENTICATOR=PasswordAuthenticator
      - CASSANDRA_PASSWORD_SEEDER=yes
      - CASSANDRA_USER=cassandra
      - CASSANDRA_PASSWORD=cassandra
      # Performance tuning
      - MAX_HEAP_SIZE=1G
      - HEAP_NEWSIZE=256M
      - CASSANDRA_CONCURRENT_READS=32
      - CASSANDRA_CONCURRENT_WRITES=32
      - CASSANDRA_CONCURRENT_COUNTER_WRITES=32
    ports:
      - "9042:9042"
    networks:
      - network
    volumes:
      - ./api/data/cassandra/cassandra.cql:/docker-entrypoint-initdb.d/cassandra.cql
      - ./api/data/cassandra/seed.cql:/docker-entrypoint-initdb.d/seed.cql
      - cassandra_data:/var/lib/cassandra
    healthcheck:
      test: ["CMD-SHELL", "cqlsh -e 'DESCRIBE CLUSTER' 127.0.0.1 9042 || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 10

networks:
  network:
    name: iotsystem

volumes:
  data:
  cassandra_data:
